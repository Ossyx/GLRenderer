layout(location = 0) out vec4 outAlbedo;
layout(location = 1) out vec4 outNormal;
layout(location = 2) out vec4 outSpecular;
layout(location = 3) out float outDepth;

in vec3 inormal;
in vec3 itangent;
in vec3 ibitangent;
in vec2 iuvcoords;

uniform sampler2D map_diffuse;
uniform sampler2D map_metallic;
uniform sampler2D map_ao;
uniform sampler2D map_roughness;
uniform sampler2D map_normal;
uniform float roughnessIN;
uniform float metallicIN;

vec3 unpackNormal(vec3 p_mapped)
{
  return vec3(p_mapped.x * 2.0 - 1.0, p_mapped.y * 2.0 - 1.0, p_mapped.z * 2.0 - 1.0);
}

vec3 packNormal(vec3 p_mapped)
{
  return vec3(p_mapped.x + 1.0 / 2.0, p_mapped.y + 1.0 / 2.0, p_mapped.z + 1.0 / 2.0);
}

void main()
{
  mat3 tbnMat = mat3(itangent, ibitangent, inormal);
  vec3 normal = tbnMat * unpackNormal(texture2D(map_normal, iuvcoords).xyz);
  vec3 finalNormal = packNormal(normal);
  vec4 albedo = texture2D(map_diffuse, iuvcoords);
  float metallic = texture2D(map_metallic, iuvcoords).x * metallicIN;
  float ao = texture2D(map_ao, iuvcoords).x;
  float roughness = texture2D(map_roughness, iuvcoords).x * roughnessIN;


  outAlbedo = albedo;
  outNormal = vec4(finalNormal, gl_FragCoord.z);
  outSpecular = vec4(ao, metallic, roughness, 1.0);
  outDepth = gl_FragCoord.z;
}
