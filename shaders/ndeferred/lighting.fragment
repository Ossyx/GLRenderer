in vec3 ipos;
out vec4 frag_colour;

uniform sampler2D rt_0;
uniform sampler2D rt_1;
uniform sampler2D rt_2;
uniform sampler2D rt_depth;

uniform mat4 invProjection;
uniform vec3 lightDirection;

vec3 unpackNormal(vec3 p_mapped)
{
  return vec3(p_mapped.x * 2.0 - 1.0, p_mapped.y * 2.0 - 1.0, p_mapped.z * 2.0 - 1.0);
}

vec3 VSPositionFromDepth(vec2 vTexCoord, float depth)
{
    // Get x/w and y/w from the viewport position
    float x = vTexCoord.x * 2 - 1;
    float y = (1 - vTexCoord.y) * 2 - 1;
    vec4 vProjectedPos = vec4(x, y, depth, 1.0f);
    // Transform by the inverse projection matrix
    vec4 vPositionVS = invProjection * vProjectedPos;  
    // Divide by w to get the view-space position
    return vPositionVS.xyz / vPositionVS.w;  
}

void main()
{
    vec2 uvcoord = (ipos.xy + vec2(1.0, 1.0)) / 2.0;
    vec3 albedo = texture(rt_0, uvcoord).xyz;
    vec3 normal = unpackNormal(texture(rt_1, uvcoord).xyz);
    vec4 specular = texture(rt_2, uvcoord);
    float depth = texture2D(rt_depth, uvcoord).x;
    
    vec3 n = normalize(normal);
    float p = max(dot(lightDirection, n), 0.0);
    vec3 pos = VSPositionFromDepth(uvcoord, depth);
    frag_colour = vec4(albedo * p, 1.0);
}
